{"version":3,"sources":["Table/Currencies.js","Table/TableRow.js","Table/ExchangeTable.js","App.js","serviceWorker.js","index.js"],"names":["currencies","TableRow","state","rates","formatCurrency","currency","isInverse","_this","props","rate","Math","round","_this2","this","fetch","concat","then","response","json","data","setState","_this3","react_default","a","createElement","Fragment","className","map","Component","exchangeTable","key","index","Table_TableRow","App","ExchangeTable","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gRAAaA,SAAa,CACtB,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,QC8BWC,oNArCXC,MAAQ,CACJC,MAAO,MAYXC,eAAiB,SAACC,EAAUC,GACxB,GAAGD,IAAaE,EAAKC,MAAMH,SAAU,MAAO,SAC5C,IAAMI,EAAOH,EACR,EAAIC,EAAKL,MAAMC,MAAME,GACtBE,EAAKL,MAAMC,MAAME,GACrB,OAAQI,EAAQC,KAAKC,MAAa,IAAPF,GAAgB,IAASA,sFAdrC,IAAAG,EAAAC,KACPR,EAAaQ,KAAKL,MAAlBH,SACRS,MAAK,+CAAAC,OAAgDV,IAChDW,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAI,OAAIP,EAAKQ,SACf,CAACjB,MAAOgB,EAAKhB,2CAYlB,IAAAkB,EAAAR,KACP,OACES,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAA,MAAIE,UAAWb,KAAKL,MAAMkB,WACtBJ,EAAAC,EAAAC,cAAA,eAAOX,KAAKL,MAAMH,SAAlB,KACCL,EAAW2B,IAAI,SAAAtB,GAAQ,OAAIiB,EAAAC,EAAAC,cAAA,UAAKH,EAAKjB,eAAeC,OAEzDiB,EAAAC,EAAAC,cAAA,MAAIE,UAAWb,KAAKL,MAAMkB,WACtBJ,EAAAC,EAAAC,cAAA,uBACCxB,EAAW2B,IAAI,SAAAtB,GAAQ,OAAIiB,EAAAC,EAAAC,cAAA,UAAKH,EAAKjB,eAAeC,GAAU,eA/BpDuB,cCyBRC,EAzBO,WAClB,OAAMP,EAAAC,EAAAC,cAAA,WACFF,EAAAC,EAAAC,cAAA,SAAOE,UAAU,kBACbJ,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,MAAIE,UAAU,iBACVJ,EAAAC,EAAAC,cAAA,eAEIxB,EAAW2B,IAAI,SAAAtB,GAAQ,OAAIiB,EAAAC,EAAAC,cAAA,MAAIM,IAAKzB,GAAWA,OAI3DiB,EAAAC,EAAAC,cAAA,aAEQxB,EAAW2B,IAAI,SAACtB,EAAU0B,GAAX,OACXT,EAAAC,EAAAC,cAACQ,EAAD,CACI3B,SAAUA,EACVqB,UAAWK,EAAQ,IAAM,EAAI,WAAa,WCLvDE,mLATX,OACEX,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,4BACAF,EAAAC,EAAAC,cAACU,EAAD,cALUN,aCQEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC","file":"static/js/main.224d2b6e.chunk.js","sourcesContent":["export const currencies = [\r\n    'GBP',\r\n    'EUR',\r\n    'USD',\r\n    'JPY',\r\n    'CHF',\r\n    'CAD',\r\n    'AUD',\r\n    'NZD',\r\n    'RUB',\r\n    'ZAR',\r\n    'MXN',\r\n    'INR'\r\n];","import React, { Component } from 'react';\r\nimport { currencies } from './Currencies';\r\nimport './Table.css';\r\n\r\nclass TableRow extends Component {\r\n    state = {\r\n        rates: {}\r\n    };\r\n\r\n    componentDidMount(){\r\n        const { currency } = this.props;\r\n        fetch(`https://api.exchangeratesapi.io/latest?base=${currency}`)\r\n            .then(response => response.json())\r\n            .then(data => this.setState(\r\n                {rates: data.rates}\r\n            ));\r\n    }\r\n\r\n    formatCurrency = (currency, isInverse) => {\r\n        if(currency === this.props.currency) return '1.0000';\r\n        const rate = isInverse ?\r\n            (1 / this.state.rates[currency]) :\r\n            this.state.rates[currency];\r\n        return (rate ? (Math.round(rate * 10000) / 10000) : rate);\r\n    }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <tr className={this.props.className}>\r\n            <td>1 {this.props.currency}=</td>\r\n            {currencies.map(currency => <td>{this.formatCurrency(currency)}</td>)}\r\n        </tr>\r\n        <tr className={this.props.className}>\r\n            <td>Inverse: </td>\r\n            {currencies.map(currency => <td>{this.formatCurrency(currency, true)}</td>)}\r\n        </tr>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TableRow;\r\n","import React from 'react';\r\nimport TableRow from './TableRow';\r\nimport { currencies } from './Currencies';\r\n\r\nconst exchangeTable = () => {\r\n    return<div>\r\n        <table className=\"exchange-table\">\r\n            <thead>\r\n                <tr className=\"exchange-head\">\r\n                    <th> </th>\r\n                    {\r\n                        currencies.map(currency => <th key={currency}>{currency}</th>)\r\n                    }\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {\r\n                    currencies.map((currency, index) => (\r\n                        <TableRow\r\n                            currency={currency}\r\n                            className={index % 2 === 1 ? 'row-dark' : ''}\r\n                        />\r\n                    ))\r\n                }\r\n            </tbody>\r\n        </table>\r\n    </div>  \r\n};\r\n\r\nexport default exchangeTable;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport ExchangeTable from './Table/ExchangeTable'\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Exchange Rates</h1>\r\n        <ExchangeTable />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}